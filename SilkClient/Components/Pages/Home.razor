@using System.ComponentModel.DataAnnotations;
@using SilkClient.api;
@using System.Security.Cryptography;
@using System.Text;

@rendermode InteractiveServer
@page "/"

<h3>Login</h3>

<div Model="@loginModel">

    <div class="form-group">
        <label for="username">Username:</label>
        <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
    </div>

    <div class="form-group">
        <label for="password">Password:</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
    </div>

</div>
<p role="status">@loginModel.Message</p>
    <button class="btn btn-primary" @onclick="Login">Click me</button>


@inject  NavigationManager NavManager
@inject  LoginService LoginService

@code {


    private LoginModel loginModel = new LoginModel();

    private async void Login()
    {
        var client = new SilkApiClient("http://localhost:5293", new HttpClient());
        
        var saltRequest = new LoginSaltRequest();
        saltRequest.Username = loginModel.Username;
        
        var saltResponse = await client.LoginSaltAsync(saltRequest);
        
        StateHasChanged();
        StringBuilder hashBuilder = new StringBuilder();
        using (SHA256 sha256 = SHA256.Create())
        {
            // Convert the input string to a byte array and compute the hash.
            byte[] data = sha256.ComputeHash(Encoding.UTF8.GetBytes(loginModel.Password + saltResponse.Salt));
            foreach (byte b in data){
                hashBuilder.AppendFormat("{0:x2}", b);
            }
        }

            var auth = new UserAuthentication ();
            auth.Username = loginModel.Username;
            auth.PasswordHash = hashBuilder.ToString();
            var loginResult = await client.LoginAsync(auth);

            if (loginResult.Success) {
                LoginService.LoggedIn = true;
                LoginService.BearerToken = loginResult.Token;
                NavManager.NavigateTo("/assets");
            }

            // Return the hexadecimal string.
            loginModel.Password = "";
            loginModel.Message = loginResult.Message;
            LoginService.LoggedIn = false;
            LoginService.BearerToken = "";

            StateHasChanged();
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Username is required.")]
        public string Username { get; set; } = "";

        [Required(ErrorMessage = "Password is required.")]
        public string Password { get; set; } = "";
        
        public string Message { get; set; } = "";
    }
}