@using System.ComponentModel.DataAnnotations;
@using SilkClient.api;
@using System.Security.Cryptography;
@using System.Text;

@rendermode InteractiveServer
@page "/"
@page "/login"

<h3>Login</h3>

<div Model="@loginModel">

    <div class="form-group">
        <label for="username">Username:</label>
        <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
    </div>

    <div class="form-group">
        <label for="password">Password:</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
    </div>

</div>
<p role="status">@loginModel.Message</p>
<button class="btn btn-primary" @onclick="LoginUser">Click me</button>


@inject NavigationManager NavManager
@inject LoginSession Session
@inject LoginService LoginService
@inject ApiClientFactory ClientFactory

@code {


    private LoginModel loginModel = new LoginModel();

    private async void LoginUser()
    {
        var client = ClientFactory.CreateClient();

        var saltRequest = new LoginSaltRequest();
        saltRequest.Username = loginModel.Username;

        var auth = new LoginParameters()
            {
                Username = loginModel.Username,
                PasswordHash = await LoginService.HashPassword(loginModel.Username, loginModel.Password)
            };

        var loginResult = await client.LoginAsync(auth);
        if (loginResult.Success)
        {
            Session.User = loginModel.Username;
            Session.LoggedIn = true;
            Session.BearerToken = loginResult.Token;
            NavManager.NavigateTo("/assets");
        }
        else
        {
            loginModel.Password = "";
            loginModel.Message = loginResult.Message;
            Session.User = "";
            Session.LoggedIn = false;
            Session.BearerToken = "";
        }

        //notify others that login-state has changed
        Session.NotifyLogin();

        StateHasChanged();
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Username is required.")]
        public string Username { get; set; } = "";

        [Required(ErrorMessage = "Password is required.")]
        public string Password { get; set; } = "";

        public string Message { get; set; } = "";
    }
}