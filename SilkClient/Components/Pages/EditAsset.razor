@page "/assets/{id}"
@using SilkClient.api;
@rendermode InteractiveServer

<PageTitle>Edit Assets</PageTitle>

<h1>Asset</h1>

<p>Edit an asset</p>


@if (asset == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="form-group">
        <label>Id:</label>
        <InputText class="form-control" @bind-Value="asset.Id" readonly/>
    </div>
    <div class="form-group">
        <label>Name:</label>
        <InputText class="form-control" @bind-Value="asset.Name" />
    </div>
    <div class="form-group">
        <label>Description:</label>
        <InputText class="form-control" @bind-Value="asset.Description" />
    </div>
    <div class="form-group">
        <label>Path:</label>
        <InputText class="form-control" @bind-Value="asset.Path" readonly/>
    </div>
    <div class="form-group">
        <label>Owner:</label>
        <InputText class="form-control" @bind-Value="asset.Owner" readonly/>
    </div>
    <div class="form-group">
        <label>Created:</label>
        <InputText class="form-control" @bind-Value="asset.Created" readonly/>
    </div>

    <button class="btn btn-primary" @onclick="Save" >Save</button>
    <p>@Message</p>
    <a href="/assets">Back to List</a>
}

@inject ApiClientFactory ClientFactory 

@code {

    [Parameter]
    public string id { get; set; }

    public string Message { get; set; } = "...";
    private Asset? asset;

    protected override async Task OnInitializedAsync()
    {
        asset = await ClientFactory.CreateClient().Get_one_AssetAsync(id);
        StateHasChanged();
    }

    private async void Save()
    {
        Message = "Saving...";
        await ClientFactory.CreateClient().Update_AssetAsync(asset);
        Message = "Asset saved successfully";
        StateHasChanged();
    }
}
