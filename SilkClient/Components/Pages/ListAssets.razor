@page "/assets"
@using SilkClient.api;
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Assets</PageTitle>

<h1>Assets</h1>

<p>All available assets</p>
<button class="btn btn-secondary" @onclick="NavigateToNewAsset">New Asset</button>
@if (assets == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Description</th>
                <th>Path</th>
                <th>Owner</th>
                <th>Created</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var a in assets)
            {
                <tr>
                    <td>@a.Id</td>
                    <td>@a.Name</td>
                    <td>@a.Description</td>
                    <td>@a.Path</td>
                    <td>@a.Owner</td>
                    <td>@a.Created.ToString()</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => Edit(a.Id)">Edit</button>
                        <button class="btn btn-primary" @onclick="() => Delete(a.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@inject  NavigationManager NavManager
@inject ApiClientFactory ClientFactory 

@code {
    private Asset[]? assets;

    //called after page loads
    protected override async Task OnInitializedAsync()
    {
        var assets = await ClientFactory.CreateClient().List_AssetsAsync();
        if (assets != null)
        {
            this.assets = assets.ToArray();
        }
        //ask page to re-render
        StateHasChanged();
    }

    private void Edit(string id){
        NavManager.NavigateTo("/assets/"+id);
    }

    private async void Delete(string id){
        await ClientFactory.CreateClient().Delete_AssetAsync(id);
        // re-fetch all assets
        await OnInitializedAsync();
    }

    private void NavigateToNewAsset(){
        NavManager.NavigateTo("/new-asset");
    }
}
